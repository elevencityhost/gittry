<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:connectlogger="http://www.mulesoft.org/schema/mule/connectlogger"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/connectlogger http://www.mulesoft.org/schema/mule/connectlogger/current/mule-connectlogger.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">


	<choice-exception-strategy
		name="emailservice-scatter-gather-exception-stragtegy-flow-2">

		<catch-exception-strategy
			when="#[exception.causedBy(com.redn.connect.exception.ConnectException)]"
			doc:name="Connect Exception Handler">
			<flow-ref name="subHandleConnectExceptionflow-email"
				doc:name="subHandleConnectExceptionflow-email" />
		</catch-exception-strategy>

		<catch-exception-strategy doc:name="anyOtherExceptionCatchExceptionStrategy">
			<flow-ref name="subHandleOtherExceptionflow_email_2"
				doc:name="subHandleOtherExceptionflow_email_2" />
		</catch-exception-strategy>

	</choice-exception-strategy>

	<choice-exception-strategy
		name="smsservice-scatter-gather-exception-stragtegy-flow-2">

		<catch-exception-strategy
			when="#[exception.causedBy(com.redn.connect.exception.ConnectException)]"
			doc:name="Connect Exception Handler">
			<flow-ref name="subHandleConnectExceptionflow-sms" doc:name="subHandleConnectExceptionflow-sms" />
		</catch-exception-strategy>

		<catch-exception-strategy doc:name="anyOtherExceptionCatchExceptionStrategy">
			<flow-ref name="subHandleOtherExceptionflow_sms_2" doc:name="subHandleOtherExceptionflow_sms_2" />
		</catch-exception-strategy>

	</choice-exception-strategy>

	<sub-flow name="subHandleConnectExceptionflow-email">
		<logger message="===== From Connect Exception Strategy Email === "
			level="INFO" doc:name="Logger" />
		<expression-component doc:name="set exception properties"><![CDATA[flowVars[ConnectConstants.VAR_ERROR_CODE]=exception.getCauseException().getCode();
flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]=exception.getCauseException().getMessage();
flowVars[ConnectConstants.VAR_ERROR_CATEGORY]=exception.getCauseException().getCategory();
flowVars[ConnectConstants.VAR_ERROR_ORIGIN]=exception.getCauseException().getOrigin();]]>
		</expression-component>
        <async doc:name="Async">
            <flow-ref name="subPrepareEEandSendToCEHflow_2" doc:name="subPrepareEEandSendToCEHflow_2"/>
        </async>
		<flow-ref name="subflow-prepare-email-exception-response_2"
			doc:name="subflow-prepare-email-exception-response_2" />
	</sub-flow>

	<sub-flow name="subHandleConnectExceptionflow-sms">
		<logger message="===== From Connect Exception Strategy SMS === "
			level="INFO" doc:name="Logger" />
		<expression-component doc:name="set exception properties"><![CDATA[flowVars[ConnectConstants.VAR_ERROR_CODE]=exception.getCauseException().getCode();
flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]=exception.getCauseException().getMessage();
flowVars[ConnectConstants.VAR_ERROR_CATEGORY]=exception.getCauseException().getCategory();
flowVars[ConnectConstants.VAR_ERROR_ORIGIN]=exception.getCauseException().getOrigin();]]>
		</expression-component>
        <async doc:name="Async">
            <flow-ref name="subPrepareEEandSendToCEHflow_2" doc:name="subPrepareEEandSendToCEHflow_2"/>
        </async>
		<flow-ref name="subflow-prepare-SMS-exception-response_2"
			doc:name="subflow-prepare-SMS-exception-response_2" />
	</sub-flow>

	<sub-flow name="subPrepareEEandSendToCEHflow_2">
		<logger
			message="ErrorCode: #[flowVars[ConnectConstants.VAR_ERROR_CODE]], ErrorMessage: #[flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]], Error Category: #[flowVars[ConnectConstants.VAR_ERROR_CATEGORY]], ErrorOrigin: #[flowVars[ConnectConstants.VAR_ERROR_ORIGIN]]"
			level="INFO" doc:name="Log - the error" />
		<custom-transformer
			class="com.redn.connect.transformer.CreateXMLEnterpriseExceptionTransformer"
			doc:name="CreateXMLEnterpriseExceptionTransformer" />
        <expression-component doc:name="Expression - Thread Sleep"><![CDATA[
Thread.sleep(2000);]]></expression-component>
        <logger message="===== Message Before CEH Queue =======#[message]" level="INFO" doc:name="Logger"/>
		<remove-property propertyName="#['JMSReplyTo']" doc:name="Property - Remove JMSReplyTo"/>
		<jms:outbound-endpoint queue="${connect.notifier.activemq.exception.queuename}" connector-ref="Active_MQ" doc:name="JMS CEH Queue"/>
		<connectlogger:error config-ref="Connectlogger__Configuration"
			logMessage="CEE sent to CEH" processState="400014160" doc:name="Connectlogger" />
	</sub-flow>

	<sub-flow name="subHandleOtherExceptionflow_email_2">
		<logger message="===== From Connect Exception Strategy SMS/EMAIL == === "
			level="INFO" doc:name="Logger" />
		<expression-component doc:name="set exception properties"><![CDATA[flowVars[ConnectConstants.VAR_ERROR_CODE]=NotifierConstants.ERROR_CODE_OTHER;
flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]=exception.getCauseException().getMessage();
flowVars[ConnectConstants.VAR_ERROR_CATEGORY]=Category.TECH;
flowVars[ConnectConstants.VAR_ERROR_ORIGIN]=ConnectConstants.CONST_EXCEPTION_ORIGIN_MULE_ESB_NS;]]>
		</expression-component>
        <async doc:name="Async">
            <flow-ref name="subPrepareEEandSendToCEHflow_2" doc:name="subPrepareEEandSendToCEHflow_2"/>
        </async>
        <expression-component doc:name="Copy_of_Prepare Email Exception Response"><![CDATA[import com.redn.connect.notifications.response.EmailMessageResponse;
import com.redn.connect.constants.NotifierConstants;
 
 emailMessageResponseObj = new  EmailMessageResponse();
 emailMessageResponseObj.setResponseCode(flowVars[ConnectConstants.VAR_ERROR_CODE]);
 emailMessageResponseObj.setResponseDescription(flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]);
 emailMessageResponseObj.setStatus(NotifierConstants.VAR_STATUS_FAILURE);

payload = emailMessageResponseObj;]]></expression-component>
	</sub-flow>
	<sub-flow name="subHandleOtherExceptionflow_sms_2">
		<logger message="===== From Connect Exception Strategy SMS/EMAIL == === "
			level="INFO" doc:name="Logger" />
		<expression-component doc:name="set exception properties"><![CDATA[flowVars[ConnectConstants.VAR_ERROR_CODE]=NotifierConstants.ERROR_CODE_OTHER;
flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]=exception.getCauseException().getMessage();
flowVars[ConnectConstants.VAR_ERROR_CATEGORY]=Category.TECH;
flowVars[ConnectConstants.VAR_ERROR_ORIGIN]=ConnectConstants.CONST_EXCEPTION_ORIGIN_MULE_ESB_NS;]]>
		</expression-component>
        <async doc:name="Async">
            <flow-ref name="subPrepareEEandSendToCEHflow_2" doc:name="subPrepareEEandSendToCEHflow_2"/>
        </async>
		<flow-ref name="subflow-prepare-SMS-exception-response_2"
			doc:name="subflow-prepare-SMS-exception-response_2" />
	</sub-flow>
	<sub-flow name="subflow-prepare-email-exception-response_2">
		<expression-component doc:name="Prepare Email Exception Response"><![CDATA[import com.redn.connect.notifications.response.EmailMessageResponse;
import com.redn.connect.constants.NotifierConstants;
 
 emailMessageResponseObj = new  EmailMessageResponse();
 emailMessageResponseObj.setResponseCode(flowVars[ConnectConstants.VAR_ERROR_CODE]);
 emailMessageResponseObj.setResponseDescription(flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]);
 emailMessageResponseObj.setStatus(NotifierConstants.VAR_STATUS_FAILURE);

payload = emailMessageResponseObj;]]></expression-component>
	</sub-flow>
	<sub-flow name="subflow-prepare-SMS-exception-response_2">
		<expression-component doc:name="Prepare SMS Exception Response"><![CDATA[import com.redn.connect.notifications.response.EmailMessageResponse;
import com.redn.connect.constants.NotifierConstants;
import com.redn.connect.notifications.response.SMSMessageResponse;
 
 smsMessageResponseObj =  new  SMSMessageResponse();
 smsMessageResponseObj.setResponseCode(flowVars[ConnectConstants.VAR_ERROR_CODE]);
 smsMessageResponseObj.setResponseDescription(flowVars[ConnectConstants.VAR_ERROR_DESCRIPTION]);
 smsMessageResponseObj.setStatus(NotifierConstants.VAR_STATUS_FAILURE);
 smsMessageResponseObj.setMessageIDs(NotifierConstants.VAR_EMPTY);


payload = smsMessageResponseObj;]]></expression-component>
	</sub-flow>

</mule>
