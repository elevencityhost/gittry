<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">
    <munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
    <spring:beans>
        <spring:import resource="classpath:exception-handler.xml"/>
        <spring:import resource="classpath:connectapimanager.xml"/>
    </spring:beans>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" doc:name="HTTP Request Configuration"/>
    <munit:test name="connect-apimanager-positive-test" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JMS']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['VM']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JMS']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[com.redn.test.input.InputFactory.getMessage(&quot;valid-cem.xml&quot;)]" doc:name="Set Payload"/>
        <set-property propertyName="msgType" value="EDIFACT" doc:name="set-message-type"/>
        <mulexml:jaxb-xml-to-object-transformer jaxbContext-ref="JAXB_Context" doc:name="XML to JAXB Object"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/api/messaging" method="POST" doc:name="HTTP"/>
        <mock:verify-call messageProcessor=".*:.*" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['log-flow-completed']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="connect-apimanager-empty-CEM" description="MUnit Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send Exception to CEH']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[com.redn.test.input.InputFactory.getMessage(&quot;empty-cem.xml&quot;)]" doc:name="Set Payload"/>
        <set-property propertyName="Content-Type" value="text/xml" doc:name="set-content-type"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/api/messaging" method="POST" doc:name="HTTP"/>
        <mock:verify-call messageProcessor=".*:.*" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send Exception to CEH']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="connect-apimanager-invalid-CEM-format" description="MUnit Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send Exception to CEH']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[com.redn.test.input.InputFactory.getMessage(&quot;invalid-type-cem.xml&quot;)]" doc:name="Set Payload"/>
        <set-property propertyName="Content-Type" value="text/xml" doc:name="set-content-type"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/api/messaging" method="POST" doc:name="HTTP"/>
        <mock:verify-call messageProcessor=".*:.*" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send Exception to CEH']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
</mule>
